/*
 * Copyright 2016, Data61
 * Commonwealth Scientific and Industrial Research Organisation (CSIRO)
 * ABN 41 687 119 230.
 *
 * This software may be distributed and modified according to the term of
 * the BSD 2-Clause license. Note that NO WARRANTY is provided.
 * See "LICENSE_BSD2.txt" for details.
 *
 * @TAG(D61_BSD)
 */

import <std_connector.camkes>;
import <TimeServer/TimeServer.camkes>;
import <global-connectors.camkes>;

import "components/Driver/Driver.camkes";
import "components/Pl2303/Pl2303.camkes";

component EHCI {
	hardware;
#ifdef CONFIG_PLAT_PC99
	dataport Buf(0x1000) mem;
#else
	dataport Buf mem;
#endif
#ifdef CONFIG_ARCH_ARM
	dataport Buf phy;
	dataport Buf clk;
	dataport Buf alg;
#elif CONFIG_ARCH_X86
	provides IOPort port;
#endif
	emits DataAvailable irq;
}

component XHCI {
	hardware;
	dataport Buf(0x10000) mem;
	provides IOPort port;
	emits DataAvailable irq;
}

assembly {
	composition {
		// component EHCI ehci;
		component TimeServer time_server;
		component XHCI xhci;
		component Driver drv;
		component Pl2303 serial;
		// component Probe probe;

		// connection seL4HardwareMMIO ehci_mem(from drv.mem, to ehci.mem);
		// connection seL4HardwareInterrupt irq(from ehci.irq, to drv.irq);

		connection seL4HardwareMMIO xhci_mem(from drv.mem, to xhci.mem);
		connection seL4HardwareInterrupt irq(from xhci.irq, to drv.irq);
		connection seL4TimeServer client_timer(from drv.timeout,
                                               to   time_server.the_timer);

#ifdef CONFIG_ARCH_ARM
		connection seL4HardwareMMIO ehci_phy(from drv.phy, to ehci.phy);
		connection seL4HardwareMMIO ehci_clk(from drv.clk, to ehci.clk);
		connection seL4HardwareMMIO ehci_alg(from drv.alg, to ehci.alg);
#elif CONFIG_ARCH_X86
		// connection seL4HardwareIOPort pci(from drv.port, to ehci.port);
		connection seL4HardwareIOPort pci(from drv.port, to xhci.port);

#endif
		connection seL4RPCCall serial_usb(from serial.cdc, to drv.cdc);
		connection seL4SharedData serial_data(from serial.fdata, to drv.buf);

		// connection seL4RPCCall probe_usb(from probe.cdc, to drv.cdc);
		// connection seL4SharedData probe_data(from probe.fdata, to drv.buf);
	}
	configuration {
#ifdef CONFIG_PLAT_PC99
		time_server.timers_per_client = 1;
		// ehci.mem_paddr = 0xf7fdd000;
		// ehci.mem_size = 0x1000;
		// ehci.irq_irq_type = "pci";
		// ehci.irq_irq_ioapic = 0;
		// ehci.irq_irq_ioapic_pin = 16;
		// ehci.irq_irq_vector = 16;
		// ehci.port_attributes = "0xCF8:0xCFF";

		xhci.mem_paddr = 0xa3620000;
		xhci.mem_size = 0x10000; // 64Kb
		xhci.irq_irq_type = "pci";
		xhci.irq_irq_ioapic = 0;
		xhci.irq_irq_ioapic_pin = 16;
		xhci.irq_irq_vector = 16;
		xhci.port_attributes = "0xCF8:0xCFF";
#elif defined(CONFIG_PLAT_IMX6)
		ehci.mem_paddr = 0x2184000;
		ehci.mem_size = 0x1000;
		ehci.phy_paddr = 0x20CA000;
		ehci.phy_size = 0x1000;
		ehci.clk_paddr = 0x20C4000;
		ehci.clk_size = 0x1000;
		ehci.alg_paddr = 0x20C8000;
		ehci.alg_size = 0x1000;
		ehci.irq_irq_number = 72;
#endif
        drv.dma_pool_paddr = 0x10000000;
		drv.dma_pool = 0x100000;
#ifdef CONFIG_IOMMU
        drv.simple = true;
        drv.cnode_size_bits = 12;
        drv.iospaces = "0x13:0x00:0x14:0";
        drv.iospace_id = 0x13;
        drv.pci_bdf = "0:14.0";
        drv.simple_untyped20_pool = 2;
        drv.heap_size = 0x100000;
#endif
	}
}